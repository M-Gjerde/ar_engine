#version 450

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Pixel {
    vec4 val;
};

layout(set = 0, binding = 0) readonly buffer  imageOne {
    vec4 imgData[];
}imgOne;

layout(set = 0, binding = 1) readonly buffer imageTwo {
    vec4 imgData[];
} imgTwo;

layout(set = 1, binding = 0) buffer imageOut {
    vec4 imgData[];
} imgOut;


void main()
{
    uint index = gl_GlobalInvocationID.x;

    float sum = 0;
    float kernelSize = 25;
    float minAverage = 255;
    float pixelDisparity = 0;
    uint disparityLevel = 64;
    float readPosLeft = 0, readPosRight = 0;

    int lowLimit = 2, highLimit = 3;
    int stride = 640;
    float prevAvg = 0;

    // If we are closing in on last columns then decrease disparity level.
    // disp 128 then 512
    // disp 256 then 384
 //   uint col = index % stride;
/*    if (col >= 512){
        disparityLevel = disparityLevel - (col - 512);
    }
  */
    // Disparity level. Match this pixel
    for (int d = lowLimit; d < disparityLevel; ++d){
        // kernel
        for (int row = -stride * lowLimit; row < stride * highLimit; row+=stride){
            for (int col = -lowLimit; col < highLimit; ++col){
                readPosRight = imgTwo.imgData[index + row + col].x;
                readPosLeft = imgOne.imgData[index + row +d  + col].x;

                sum += abs(readPosRight - readPosLeft);
            }
        }

        float average = sum / kernelSize;
        if (average < minAverage){
            minAverage = average;
            pixelDisparity = d;

        }

        sum = 0;
    }
    imgOut.imgData[index].x = pixelDisparity;//.val.x = pixelDisparity;
    pixelDisparity = 0;
    minAverage = 255;// Reset min for avg

}