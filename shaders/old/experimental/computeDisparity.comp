#version 450
#extension GL_EXT_debug_printf : enable

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Pixel {
    vec4 val;
};

layout(set = 0, binding = 0) readonly buffer  imageOne {
    float imgData[];
}imgOne;


layout(set = 0, binding = 1) readonly buffer imageTwo {
    float imgData[];
} imgTwo;

layout(set = 0, binding = 2) readonly buffer options {
    vec4 roi;
} opt;


layout(set = 1, binding = 0) buffer imageOut {
    float imgData[];
} imgOut;


void main()
{
    uint index = gl_GlobalInvocationID.x;
    uint gRow = index / 640;
    uint gCol = index % 640;

    const int k = 15;                               // Kernel size i.e k * k
    uint disparityLevel = 256;                      // Pixels in x-direction to search for correspondence


    // Check we are only computing necessary rows
    if (gRow < (opt.roi.x) || gRow > (opt.roi.y)){
        return;
    }

    // check we are only computing necessary columns
    if (gCol < opt.roi.z || gCol > opt.roi.w){
        return;
    }

    // discard if we are working within the first or last 10 rows of the picture
    if (index < (640 * 10) || index > (640 * 470))
    {
        imgOut.imgData[index].x = 0;
        return;
    }

    const int disparityLevelArraySize = 256;        // Pixels in x-direction to search for correspondence (const int for array declaration)
    int stride = 640;                               // Width of input image (Assume identical L/R dimmensions
    float minThreshold = 150000;                       // Threshold value for minimzer for cost fuction

    const int kernelSize = 81;                      // Number of pixels in kernel used for correspondence
    int lowLimit = 7, highLimit = 8;                // Used for for-loop indexes to go from -lowlimit to hihglimit
    float matchKernel[k][k];                        // Kernel from Left image used to search for matches in the right image
    float SAD[disparityLevelArraySize];             // Array to store cost-values from SAD algorithm
    int rowLoop = 0;                                // Index for each row iteration
    int colLoop = 0;                                // Index for each col iteration

    // Change disparity levels when close to the edge.
    if (gCol < disparityLevel){
        disparityLevel = disparityLevel - (disparityLevel - gCol);
    }

    // --- SAD ALGORITHM
    // Create Kernel from left image and fill with values
    for (int row = -stride * lowLimit; row < stride * highLimit; row+=stride){
        for (int col = -lowLimit; col < highLimit; ++col){
            matchKernel[rowLoop][colLoop] = imgOne.imgData[index + row + col].x;
            colLoop++;
        }
        rowLoop++;
    }

    float rightImgKernel[k][k];                     // Kernel from right image
    float sum = 0;                                  // Sum og kernel
    float temp = disparityLevel;                    // Temp value used to compare minimizers
    uint disparity = 0;                             // disparity stored here
    // Search for correspondence in right image along each disparity.
    for (uint d = 0; d < disparityLevel; ++d){
        sum = 0;
        rowLoop = 0;
        colLoop = 0;
        // Create K * K kernel from Right image with disparity offset
        for (int row = -stride * lowLimit; row < stride * highLimit; row+=stride){
            for (int col = -lowLimit; col < highLimit; ++col){
                rightImgKernel[rowLoop][colLoop] = imgTwo.imgData[index + row + col - d].x;
                colLoop++;
            }
            rowLoop++;
        }

        // Find the cost for each kernel along disparity
        for (int i = 0; i < k; ++i){
            for (int j = 0; j < k; ++j){
                sum += abs(matchKernel[i][j] - rightImgKernel[i][j]);
            }
        }

        // save all the SAD values
        SAD[d] = sum;

        // determine the minimum sad value
        if (temp > SAD[d]) {
            temp=SAD[d];
            disparity = d;
        } else if (temp == SAD[d]){ // If we have a value equal to min, I.e our minimum is not unique, then discard it.
            disparity = 0;
        }

    }

    // --- MINIMIZER TREHSHOLD
    // If disparity is less than 6. I.e distance from camera(RealsenseD435) to object is 6.3 meters or more then discrd
    // 10 means max dist 3 meters ish
    // 3 means 10.5 meters ish
    if (disparity < 3 || SAD[disparity] > minThreshold){
        imgOut.imgData[index].x = 0;
        return;
    }
    float disp = disparity;

    imgOut.imgData[index].x = disp / 255;

    // --- SUBPIXEL ESTIMATION ---

    float x1, y1, x2, y2, x3, y3;
    x1 = disparity;
    x2 = disparity - 1;
    x3 = disparity + 1;
    y1 = SAD[disparity];
    y2 = SAD[disparity - 1];
    y3 = SAD[disparity + 1];

    float a, b, c;
    float denum1 = (x1 - x2) * (x1-x3);
    float denum2 = (x2 - x1) * (x2-x3);
    float denum3 = (x3 - x1) * (x3-x2);

    a = (y1 / denum1) + (y2 / denum2) + (y3/denum3);
    b = -(y1 * (x2+x3) / denum1) - (y2 * (x3+x1) / denum2) - (y3 * (x1+x2) / denum3);
    c = ((y1 * x2 * x3) / denum1) + ((y2 * x3 * x1) / denum2) + ((y3*x1*x2) / denum3);

    //debugPrintfEXT("a: %f, b: %f, c: %f\n", a, b, c);

    //float xmin = -b / (2 * a);
    float dMinus = a * x2 * x2 + b * x2 +c;
    float dPlus = a * x3 * x3 + b * x3 +c;
    float dF = a * x1 * x1 + b * x1 +c;

    float numerator = (dPlus - dMinus);
    float denumerator = 2 * (dPlus + dMinus - (2*dF));
    float xmin = x1 - (numerator/denumerator);

    //float subDisparity = xmin * 65535;
    float subDisparity = xmin / 255; // Downscale values to being between 0 and 1.

    // Save minimum value to outImage
    imgOut.imgData[index].x = subDisparity;
    //if (index == (640 * 240 + 320))
    //debugPrintfEXT("disparity: %d\n", disparity);

}